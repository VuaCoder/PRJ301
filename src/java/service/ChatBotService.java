//package service;
//
//    import com.google.gson.JsonArray;
//    import com.google.gson.JsonObject;
//    import com.google.gson.JsonParser;
//    import java.io.*;
//    import java.net.HttpURLConnection;
//    import java.net.URL;
//    import java.sql.Connection;
//    import java.sql.PreparedStatement;
//    import java.sql.ResultSet;
//    import java.util.regex.Matcher;
//    import java.util.regex.Pattern;
//    import util.DBConnection;
//
//    public class ChatBotService {
//
//        private static final String GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions";
//        private static final String GROQ_API_KEY = "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";
//
//        public JsonObject processChatRequest(String userMessage, boolean showMore) throws Exception {
//            if (userMessage.equalsIgnoreCase("Kh√¥ng, c·∫£m ∆°n")) {
//        JsonObject response = new JsonObject();
//        response.addProperty("success", true);
//        response.addProperty("message", "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•! N·∫øu c·∫ßn h·ªó tr·ª£ th√™m, h√£y nh·∫Øn cho t√¥i b·∫•t k·ª≥ l√∫c n√†o.");
//        return response;
//    }
//
//            System.out.println("Step 1: Getting filtered rooms with AI SQL...");
//            String propertyContext = getFilteredRoomsWithAI(userMessage, showMore);
//            System.out.println("Property context: " + propertyContext);
//
//            System.out.println("Step 2: Creating system prompt...");
//            String systemPrompt = createSystemPrompt(propertyContext);
//
//            if ("KH√îNG_C√ì_PH√íNG".equals(systemPrompt)) {
//                JsonObject jsonResponse = new JsonObject();
//                jsonResponse.addProperty("success", true);
//                jsonResponse.addProperty("message", "Xin l·ªói, hi·ªán kh√¥ng c√≥ ph√≤ng ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.");
//                System.out.println("Kh√¥ng c√≥ ph√≤ng ph√π h·ª£p - k·∫øt th√∫c s·ªõm.");
//                return jsonResponse;
//            }
//
//            System.out.println("Step 3: Calling Groq API...");
//            String aiResponse = callGroqAPI(systemPrompt, userMessage);
//            System.out.println("AI Response: " + aiResponse);
//
//            try {
//                logChatHistory(userMessage, aiResponse);
//            } catch (Exception logError) {
//                System.err.println("Failed to log chat history (non-critical): " + logError.getMessage());
//            }
//
//            JsonObject jsonResponse = new JsonObject();
//            jsonResponse.addProperty("success", true);
//            jsonResponse.addProperty("message", aiResponse);
//            return jsonResponse;
//        }
//
//        private String getFilteredRoomsWithAI(String userMessage, boolean showMore) throws Exception {
//            System.out.println("=== getFilteredRoomsWithAI ===");
//            System.out.println("User message: " + userMessage);
//            System.out.println("Show more: " + showMore);
//System.out.println("Attempting database connection...");
//
//            StringBuilder context = new StringBuilder();
//
//            try (Connection conn = DBConnection.getConnection()) {
//                System.out.println("Database connected successfully");
//
//                String aiGeneratedSQL = generateSQLWithAI(userMessage, showMore);
//                System.out.println("AI Generated SQL: " + aiGeneratedSQL);
//
//                PreparedStatement stmt = conn.prepareStatement(aiGeneratedSQL);
//                ResultSet rs = stmt.executeQuery();
//
//                int count = 0;
//                while (rs.next()) {
//                    count++;
//                    String title = rs.getString("title");
//                    double price = rs.getDouble("price");
//                    int capacity = rs.getInt("capacity");
//                    String description = rs.getString("description");
//                    String imagesJson = rs.getString("images");
//
//                    String firstImage = extractFirstImage(imagesJson);
//
//                    context.append(String.format("""
//                        <div class='message bot-message' style='margin-bottom:20px;'>
//                            <strong>üè† Ph√≤ng %s:</strong> ,.0f ƒë/ƒë√™m - %d ng∆∞·ªùi<br>
//                            üìå %s<br>
//                            <img src='%s' alt='·∫¢nh ph√≤ng' style='width:100%%; max-height:160px; object-fit:cover; border-radius:10px; margin-top:5px;'>
//                        </div>
//                        """, title, price, capacity, description, firstImage));
//                }
//
//                System.out.println("Found " + count + " rooms");
//
//                if (count == 0) {
//                    System.out.println("No rooms found, returning KH√îNG_C√ì_PH√íNG directly");
//                    return "KH√îNG_C√ì_PH√íNG";
//                }
//
//
//            } catch (Exception e) {
//                System.err.println("Database error: " + e.getMessage());
//                e.printStackTrace();
//                System.out.println("Falling back to original method...");
//                return getFilteredRoomsOriginal(userMessage, showMore);
//            }
//
//            System.out.println("Context: " + context.toString());
//            return context.toString();
//        }
//
//    private String extractFirstImage(String json) {
//        if (json == null || json.isBlank()) return "https://via.placeholder.com/300x180.png?text=No+Image";
//        try {
//            JsonArray arr = JsonParser.parseString(json).getAsJsonArray();
//            if (arr.size() > 0) return arr.get(0).getAsString();
//        } catch (Exception e) {
//            System.err.println("Error parsing image JSON: " + e.getMessage());
//        }
//        return "https://via.placeholder.com/300x180.png?text=No+Image";
//    }
//
//
//
//
//        private String generateSQLWithAI(String userMessage, boolean showMore) throws IOException {
//System.out.println("Generating SQL with AI...");
//
//            String sqlPrompt = createSQLGenerationPrompt(userMessage, showMore);
//            String aiResponse = callGroqAPIForSQL(sqlPrompt);
//
//            String sql = extractSQLFromResponse(aiResponse);
//            sql = validateAndSanitizeSQL(sql);
//
//            return sql;
//        }
//
//        private String createSQLGenerationPrompt(String userMessage, boolean showMore) {
//            int limit = showMore ? 8 : 3;
//
//
//            return String.format("""
//                 B·∫°n l√† chuy√™n gia SQL. D·ª±a v√†o y√™u c·∫ßu c·ªßa kh√°ch h√†ng, h√£y t·∫°o c√¢u SQL ƒë·ªÉ t√¨m ph√≤ng ph√π h·ª£p.
//
//                    SCHEMA DATABASE:
//                    - Room(room_id, property_id, title, description, capacity, price, images, status)
//                    - Property(property_id, host_id, name, description, address, city, ...)
//
//                    Y√äU C·∫¶U KH√ÅCH H√ÄNG: "%s"
//
//                    QUY T·∫ÆC T·∫†O SQL:
//                    1. Ch·ªâ l·∫•y ph√≤ng c√≥ status = 'Available'
//                    2. JOIN Room r v·ªõi Property p ON r.property_id = p.property_id
//                    3. N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu th√†nh ph·ªë (VD: 'Nha Trang'), l·ªçc theo p.city LIKE '%%...%%'
//                    4. SELECT c√°c c·ªôt: r.title, r.price, r.capacity, r.description, p.city
//                    5. S·∫Øp x·∫øp theo gi√° t·ª´ th·∫•p ƒë·∫øn cao
//                    6. Gi·ªõi h·∫°n %d k·∫øt qu·∫£ (d√πng TOP %d cho SQL Server)
//
//                    PH√ÇN T√çCH NG√îN NG·ªÆ T·ª∞ NHI√äN:
//                    - \"ƒë∆°n/single\": description LIKE N'%%ƒë∆°n%%'
//                    - \"ƒë√¥i/double\": description LIKE N'%%ƒë√¥i%%'
//                    - \"vip\": description LIKE N'%%VIP%%'
//                    - \"view\": description LIKE N'%%view%%'
//                    - \"d∆∞·ªõi X tri·ªáu\": price <= X*1000000
//                    - \"d∆∞·ªõi X ngh√¨n/k\": price <= X*1000
//                    - \"t·ª´ X t·ªõi Y\": price BETWEEN X AND Y
//                    - \"X ng∆∞·ªùi\": capacity >= X
//                    - \"r·∫ª/gi√° r·∫ª\": ORDER BY price ASC
//                    - \"ƒë·∫Øt/cao c·∫•p\": ORDER BY price DESC
//
//                    CH·ªà TR·∫¢ V·ªÄ C√ÇU SQL, KH√îNG GI·∫¢I TH√çCH.
//                """, userMessage, limit, limit);
//        }
//
//         private String getFilteredRoomsOriginal(String userMessage, boolean showMore) throws Exception {
//            StringBuilder context = new StringBuilder();
//            String fallbackCity = extractCityFromMessage(userMessage);
//
//            try (Connection conn = DBConnection.getConnection()) {
//                String sql = buildDynamicQuery(userMessage, showMore);
//                System.out.println("Fallback SQL: " + sql);
//
//                PreparedStatement stmt = conn.prepareStatement(sql);
//                ResultSet rs = stmt.executeQuery();
//
//                context.append("Danh s√°ch ph√≤ng c√≥ s·∫µn:\n");
//                int count = 0;
//                while (rs.next()) {
//                    count++;
//String title = rs.getString("title");
//                    double price = rs.getDouble("price");
//                    int capacity = rs.getInt("capacity");
//                    String description = rs.getString("description");
//
//                    context.append(String.format(
//                            "- Ph√≤ng %s: %,.0f ƒë/ƒë√™m - %d ng∆∞·ªùi - %s\n",
//                            title, price, capacity, description
//                    ));
//                }
//
//                if (count == 0) {
//                    // N·∫øu kh√¥ng c√≥ ph√≤ng theo y√™u c·∫ßu, th·ª≠ l·∫•y 3 ph√≤ng b·∫•t k·ª≥ t·∫°i th√†nh ph·ªë ƒë√≥
//                    String top3sql = "SELECT TOP 3 r.title, r.price, r.capacity, r.description " +
//                                     "FROM Room r JOIN Property p ON r.property_id = p.property_id " +
//                                     "WHERE r.status = 'Available' AND p.city LIKE ? ORDER BY r.price ASC";
//
//                    PreparedStatement top3stmt = conn.prepareStatement(top3sql);
//                    top3stmt.setString(1, "%" + fallbackCity + "%");
//                    ResultSet top3rs = top3stmt.executeQuery();
//
//                    int fallbackCount = 0;
//                    while (top3rs.next()) {
//                        fallbackCount++;
//                        String title = top3rs.getString("title");
//                        double price = top3rs.getDouble("price");
//                        int capacity = top3rs.getInt("capacity");
//                        String description = top3rs.getString("description");
//
//                        context.append(String.format(
//                                "- Ph√≤ng %s: %,.0f ƒë/ƒë√™m - %d ng∆∞·ªùi - %s\n",
//                                title, price, capacity, description
//                        ));
//                    }
//
//                    if (fallbackCount == 0) {
//                        context.append(String.format("Hi·ªán t·∫°i kh√¥ng c√≤n ph√≤ng n√†o kh·∫£ d·ª•ng ·ªü %s.\n", fallbackCity));
//                    }
//                }
//
//            } catch (Exception e) {
//                System.err.println("Fallback error: " + e.getMessage());
//                context.append("Hi·ªán t·∫°i ch∆∞a c√≥ ph√≤ng t·∫°i th√†nh ph·ªë b·∫°n mong mu·ªën");
//
//            }
//
//            return context.toString();
//        }
//
//        private String extractCityFromMessage(String message) {
//            message = message.toLowerCase();
//            if (message.contains("nha trang")) return "Nha Trang";
//            if (message.contains("ƒë√† l·∫°t") || message.contains("da lat")) return "ƒê√† L·∫°t";
//            if (message.contains("h√† n·ªôi")) return "H√† N·ªôi";
//            if (message.contains("thanh h√≥a") || message.contains("thanh hoa")) return "Thanh H√≥a";
//            return ""; // fallback n·∫øu kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c th√†nh ph·ªë
//        }
//        private String callGroqAPIForSQL(String prompt) throws IOException {
//            URL url = new URL(GROQ_API_URL);
//HttpURLConnection conn = (HttpURLConnection) url.openConnection();
//
//            conn.setConnectTimeout(10000);
//            conn.setReadTimeout(30000);
//
//            conn.setRequestMethod("POST");
//            conn.setRequestProperty("Authorization", "Bearer " + GROQ_API_KEY);
//            conn.setRequestProperty("Content-Type", "application/json");
//            conn.setDoOutput(true);
//
//            JsonObject request = new JsonObject();
//            request.addProperty("model", "llama3-8b-8192");
//            request.addProperty("max_tokens", 300);
//            request.addProperty("temperature", 0.1);
//
//            JsonArray messages = new JsonArray();
//
//            JsonObject userMessage = new JsonObject();
//            userMessage.addProperty("role", "user");
//            userMessage.addProperty("content", prompt);
//            messages.add(userMessage);
//
//            request.add("messages", messages);
//
//            try (OutputStream os = conn.getOutputStream()) {
//                byte[] input = request.toString().getBytes("utf-8");
//                os.write(input, 0, input.length);
//            }
//
//            int responseCode = conn.getResponseCode();
//            if (responseCode != 200) {
//                throw new IOException("SQL AI API call failed with code " + responseCode);
//            }
//
//            StringBuilder response = new StringBuilder();
//            try (BufferedReader br = new BufferedReader(
//                    new InputStreamReader(conn.getInputStream(), "utf-8"))) {
//                String responseLine;
//                while ((responseLine = br.readLine()) != null) {
//                    response.append(responseLine.trim());
//                }
//            }
//
//            JsonObject jsonResponse = JsonParser.parseString(response.toString()).getAsJsonObject();
//            JsonArray choices = jsonResponse.getAsJsonArray("choices");
//            if (choices != null && choices.size() > 0) {
//                JsonObject firstChoice = choices.get(0).getAsJsonObject();
//                JsonObject message = firstChoice.getAsJsonObject("message");
//                return message.get("content").getAsString();
//            }
//
//            throw new IOException("Failed to get SQL from AI");
//        }
//
//        private String extractSQLFromResponse(String aiResponse) {
//            String sql = aiResponse.replaceAll("```sql", "").replaceAll("```", "").trim();
//
//            String[] lines = sql.split("\n");
//            StringBuilder cleanSQL = new StringBuilder();
//
//            for (String line : lines) {
//                line = line.trim();
//                if (line.toUpperCase().startsWith("SELECT") || 
//                    line.toUpperCase().startsWith("FROM") ||
//                    line.toUpperCase().startsWith("WHERE") ||
//                    line.toUpperCase().startsWith("AND") ||
//                    line.toUpperCase().startsWith("OR") ||
//line.toUpperCase().startsWith("ORDER") ||
//                    line.toUpperCase().startsWith("TOP") ||
//                    cleanSQL.length() > 0) {
//                    cleanSQL.append(line).append(" ");
//                }
//            }
//
//            return cleanSQL.toString().trim();
//        }
//
//           private String validateAndSanitizeSQL(String sql) {
//            String[] forbiddenKeywords = {"DROP", "DELETE", "UPDATE", "INSERT", "ALTER", "CREATE", "EXEC", "--", "/*", "*/"};
//
//            String upperSQL = sql.toUpperCase();
//            for (String keyword : forbiddenKeywords) {
//                if (upperSQL.contains(keyword)) {
//                    System.err.println("[SECURITY WARNING] Forbidden keyword detected in SQL: " + keyword);
//                    return "SELECT TOP 3 r.title, r.capacity, r.price, r.description, p.city " +
//                           "FROM Room r JOIN Property p ON r.property_id = p.property_id " +
//                           "WHERE r.status = 'Available' ORDER BY r.price ASC";
//                }
//            }
//
//            if (!upperSQL.trim().startsWith("SELECT")) {
//                throw new IllegalArgumentException("Invalid SQL query generated by AI (must start with SELECT)");
//            }
//
//            return sql;
//        }
//
//         private String buildDynamicQuery(String userMessage, boolean showMore) {
//            StringBuilder sql = new StringBuilder();
//
//            sql.append("SELECT ");
//            sql.append(showMore ? "TOP 8 " : "TOP 3 ");
//            sql.append("r.title, r.capacity, r.price, r.description, p.city ");
//            sql.append("FROM Room r JOIN Property p ON r.property_id = p.property_id ");
//            sql.append("WHERE r.status = 'Available' ");
//
//            String message = userMessage.toLowerCase();
//
//            // N·∫øu ng∆∞·ªùi d√πng n√≥i ƒë·∫øn t√™n th√†nh ph·ªë
//         if (message.contains("nha trang")) {
//        sql.append("AND LOWER(p.city) LIKE '%nha trang%' ");
//    } else if (message.contains("ƒë√† l·∫°t") || message.contains("da lat")) {
//        sql.append("AND LOWER(p.city) LIKE '%da lat%' ");
//    } else if (message.contains("h√† n·ªôi") || message.contains("ha noi")) {
//        sql.append("AND LOWER(p.city) LIKE '%ha noi%' ");
//    } else if (message.contains("thanh h√≥a") || message.contains("thanh hoa")) {
//        sql.append("AND LOWER(p.city) LIKE '%thanh hoa%' ");
//    } else if (message.contains("h·ªì ch√≠ minh") || message.contains("ho chi minh") || message.contains("sai gon") || message.contains("s√†i g√≤n")) {
//        sql.append("AND LOWER(p.city) LIKE '%ho chi minh%' ");
//    }else if (message.contains("ƒë√† n·∫µng") || message.contains("da nang")) {
//        sql.append("AND LOWER(p.city) LIKE '%da nang%' ");
//    }
//         
//         
//
//            // Lo·∫°i ph√≤ng - d·ª±a tr√™n m√¥ t·∫£ trong description
//            if (message.contains("suite")) {
//sql.append("AND r.description LIKE N'%suite%' ");
//            } else if (message.contains("ƒë∆°n") || message.contains("don") || message.contains("single")) {
//                sql.append("AND r.description LIKE N'%single%' ");
//            } else if (message.contains("ƒë√¥i") || message.contains("doi") || message.contains("double")) {
//                sql.append("AND r.description LIKE N'%double%' ");
//            }
//
//            String priceCondition = extractPriceRange(userMessage);
//            if (!priceCondition.isEmpty()) {
//                sql.append("AND " + priceCondition + " ");
//            }
//
//            int capacity = extractCapacity(userMessage);
//            if (capacity > 0) {
//                sql.append("AND r.capacity >= " + capacity + " ");
//            }
//
//            // N·∫øu ng∆∞·ªùi d√πng h·ªèi ph√≤ng r·∫ª nh·∫•t ho·∫∑c c√≥ t·ª´ kh√≥a li√™n quan
//            if (message.contains("r·∫ª nh·∫•t") || message.contains("th·∫•p nh·∫•t") || message.contains("gi√° th·∫•p")) {
//                sql.append("ORDER BY r.price ASC");
//            } else if (message.contains("ƒë·∫Øt nh·∫•t") || message.contains("cao c·∫•p nh·∫•t")) {
//                sql.append("ORDER BY r.price DESC");
//            } else {
//                sql.append("ORDER BY r.price ASC");
//            }
//
//            return sql.toString();
//        }
//
//
//        private String extractPriceRange(String message) {
//            message = message.toLowerCase();
//
//            try {
//                if (message.matches(".*d∆∞·ªõi\\s*\\d+\\s*tri·ªáu.*")) {
//                    Pattern pattern = Pattern.compile("d∆∞·ªõi\\s*(\\d+)\\s*tri·ªáu");
//                    Matcher matcher = pattern.matcher(message);
//                    if (matcher.find()) {
//                        long maxPrice = Long.parseLong(matcher.group(1)) * 1000000;
//                        return "price <= " + maxPrice;
//                    }
//                }
//
//                if (message.matches(".*d∆∞·ªõi\\s*\\d+\\s*[k|ngh√¨n].*")) {
//                    Pattern pattern = Pattern.compile("d∆∞·ªõi\\s*(\\d+)\\s*(?:k|ngh√¨n)");
//                    Matcher matcher = pattern.matcher(message);
//                    if (matcher.find()) {
//                        long maxPrice = Long.parseLong(matcher.group(1)) * 1000;
//                        return "price <= " + maxPrice;
//                    }
//                }
//
//                if (message.matches(".*t·ª´\\s*\\d+.*t·ªõi\\s*\\d+.*")) {
//                    Pattern pattern = Pattern.compile("t·ª´\\s*(\\d+).*?t·ªõi\\s*(\\d+)");
//                    Matcher matcher = pattern.matcher(message);
//                    if (matcher.find()) {
//                        long minPrice = Long.parseLong(matcher.group(1)) * 1000;
//                        long maxPrice = Long.parseLong(matcher.group(2)) * 1000;
//                        return "price BETWEEN " + minPrice + " AND " + maxPrice;
//                    }
//}
//            } catch (NumberFormatException e) {
//                System.err.println("Error parsing price: " + e.getMessage());
//            }
//
//            return "";
//        }
//
//        private int extractCapacity(String message) {
//            Pattern pattern = Pattern.compile("(\\d+)\\s*ng∆∞·ªùi");
//            Matcher matcher = pattern.matcher(message);
//            if (matcher.find()) {
//                try {
//                    return Integer.parseInt(matcher.group(1));
//                } catch (NumberFormatException e) {
//                    System.err.println("Error parsing capacity: " + e.getMessage());
//                }
//            }
//            return 0;
//        }
//
//        private void logChatHistory(String userInput, String botResponse) throws Exception {
//            try (Connection conn = DBConnection.getConnection()) {
//                String sql = "INSERT INTO AIChatLog (user_id, question, answer, timestamp) VALUES (?, ?, ?, GETDATE())";
//                PreparedStatement stmt = conn.prepareStatement(sql);
//                stmt.setInt(1, 1); // Replace with actual user_id
//                stmt.setString(2, userInput);
//                stmt.setString(3, botResponse);
//                stmt.executeUpdate();
//            } catch (Exception e) {
//                System.err.println("Error logging chat: " + e.getMessage());
//            }
//        }
//
//       private String createSystemPrompt(String propertyContext) {
//            if (propertyContext.contains("KH√îNG_C√ì_PH√íNG")) {
//                return "KH√îNG_C√ì_PH√íNG";
//            }
//
//            return String.format("""
//                B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o chuy√™n h·ªó tr·ª£ tra c·ª©u kh√°ch s·∫°n. D∆∞·ªõi ƒë√¢y l√† danh s√°ch ph√≤ng kh·∫£ d·ª•ng l·∫•y tr·ª±c ti·∫øp t·ª´ c∆° s·ªü d·ªØ li·ªáu. TUY·ªÜT ƒê·ªêI KH√îNG b·ªãa ƒë·∫∑t hay t·∫°o ra th√¥ng tin kh√¥ng c√≥. N·∫øu kh√¥ng c√≥ ph√≤ng ph√π h·ª£p, h√£y tr·∫£ l·ªùi r√µ r√†ng l√† kh√¥ng c√≥.
//
//                NHI·ªÜM V·ª§:
//                1. Ph√¢n t√≠ch y√™u c·∫ßu kh√°ch h√†ng v·ªÅ lo·∫°i ph√≤ng, s·ªë ng∆∞·ªùi, gi√°, ƒë·ªãa ƒëi·ªÉm
//                2. N·∫øu ch·ªâ c√≥ m·ªôt ti√™u ch√≠ nh∆∞ 'ph√≤ng r·∫ª nh·∫•t ·ªü Nha Trang' th√¨ ch·ªâ c·∫ßn g·ª£i √Ω 1‚Äì2 ph√≤ng th·ªèa m√£n ƒë√∫ng ƒëi·ªÅu ki·ªán ƒë√≥
//                3. Ng∆∞·ª£c l·∫°i, ƒë·ªÅ xu·∫•t 3‚Äì5 ph√≤ng ph√π h·ª£p nh·∫•t trong danh s√°ch b√™n d∆∞·ªõi
//                4. M·ªói ph√≤ng tr√¨nh b√†y g·ªìm: t√™n ph√≤ng, gi√°/ƒë√™m, m√¥ t·∫£ ng·∫Øn g·ªçn ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t
//                5. N·∫øu c√≥ nhi·ªÅu ph√≤ng gi·ªëng nhau, ch·ªçn ph√≤ng r·∫ª h∆°n tr∆∞·ªõc
//                6. K·∫øt th√∫c b·∫±ng: "B·∫°n c√≥ mu·ªën xem th√™m l·ª±a ch·ªçn kh√°c kh√¥ng?"
//
//                QUY T·∫ÆC TR·∫¢ L·ªúI:
//                - Ng√¥n ng·ªØ: ti·∫øng Vi·ªát, l·ªãch s·ª± v√† th√¢n thi·ªán
//                - Th√¥ng tin ng·∫Øn g·ªçn, ch√≠nh x√°c, kh√¥ng th√™m th·∫Øt
//                - Lu√¥n hi·ªÉn th·ªã gi√° c·ª• th·ªÉ theo ƒë·ªãnh d·∫°ng ###,000 ƒë/ƒë√™m
//                - D·ªØ li·ªáu ƒë·∫ßu v√†o n·∫±m trong danh s√°ch b√™n d∆∞·ªõi
//
//                %s
//
//                V√≠ d·ª• c√°ch tr√¨nh b√†y:
//"D·∫°, c√≥ m·ªôt s·ªë ph√≤ng ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:
//
//                üõèÔ∏è Pine View Double Room: 450,000 ƒë/ƒë√™m
//                - Ph√≤ng ƒë√¥i nh√¨n ra r·ª´ng th√¥ng, c√≥ gi∆∞·ªùng queen
//
//                üõèÔ∏è Garden View Single Room: 300,000 ƒë/ƒë√™m
//                - Ph√≤ng ƒë∆°n nh√¨n ra v∆∞·ªùn, y√™n tƒ©nh
//
//                üõèÔ∏è Family Suite: 800,000 ƒë/ƒë√™m
//                - Ph√π h·ª£p cho gia ƒë√¨nh, c√≥ b·∫øp nh·ªè
//
//                B·∫°n c√≥ mu·ªën xem th√™m l·ª±a ch·ªçn kh√°c kh√¥ng?"
//            """, propertyContext);
//        }
//
//
//       private String callGroqAPI(String systemPrompt, String userMessage) throws IOException {
//        System.out.println("‚û°Ô∏è B·∫Øt ƒë·∫ßu g·ªçi Groq API...");
//
//        URL url = new URL(GROQ_API_URL);
//        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
//
//        // C√†i ƒë·∫∑t timeout m·∫°nh h∆°n
//        conn.setConnectTimeout(10000);  // 10 gi√¢y k·∫øt n·ªëi
//        conn.setReadTimeout(20000);     // 20 gi√¢y ph·∫£n h·ªìi
//
//        conn.setRequestMethod("POST");
//        conn.setRequestProperty("Authorization", "Bearer " + GROQ_API_KEY);
//        conn.setRequestProperty("Content-Type", "application/json");
//        conn.setDoOutput(true);
//
//        JsonObject request = new JsonObject();
//        request.addProperty("model", "llama3-8b-8192");
//        request.addProperty("max_tokens", 400);
//        request.addProperty("temperature", 0.7);
//
//        JsonArray messages = new JsonArray();
//
//        JsonObject systemMessage = new JsonObject();
//        systemMessage.addProperty("role", "system");
//        systemMessage.addProperty("content", systemPrompt);
//        messages.add(systemMessage);
//
//        JsonObject userMessageObj = new JsonObject();
//        userMessageObj.addProperty("role", "user");
//        userMessageObj.addProperty("content", userMessage);
//        messages.add(userMessageObj);
//
//        request.add("messages", messages);
//
//        System.out.println("‚û°Ô∏è G·ª≠i request ƒë·∫øn Groq...");
//        try (OutputStream os = conn.getOutputStream()) {
//            byte[] input = request.toString().getBytes("utf-8");
//            os.write(input, 0, input.length);
//        }
//
//        int responseCode = conn.getResponseCode();
//        System.out.println("‚úÖ Response Code t·ª´ Groq: " + responseCode);
//
//        if (responseCode != 200) {
//            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getErrorStream(), "utf-8"));
//            StringBuilder errorResponse = new StringBuilder();
//            String line;
//            while ((line = br.readLine()) != null) {
//                errorResponse.append(line.trim());
//            }
//            System.err.println("‚ùå API l·ªói: " + errorResponse);
//            throw new IOException("Groq API tr·∫£ v·ªÅ l·ªói: " + responseCode);
//        }
//
//        StringBuilder response = new StringBuilder();
//try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
//            String line;
//            while ((line = br.readLine()) != null) {
//                response.append(line.trim());
//            }
//        }
//
//        System.out.println("‚úÖ Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi JSON t·ª´ Groq");
//
//        try {
//
//            JsonObject jsonResponse = JsonParser.parseString(response.toString()).getAsJsonObject();
//            JsonArray choices = jsonResponse.getAsJsonArray("choices");
//
//            if (choices == null || choices.size() == 0) {
//                System.err.println("‚ùó Groq tr·∫£ v·ªÅ ph·∫£n h·ªìi r·ªóng.");
//                return "Xin l·ªói, hi·ªán t√¥i kh√¥ng th·ªÉ ƒë∆∞a ra g·ª£i √Ω ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i sau.";
//            }
//
//            JsonObject firstChoice = choices.get(0).getAsJsonObject();
//            JsonObject message = firstChoice.getAsJsonObject("message");
//            return message.get("content").getAsString();
//
//        } catch (Exception e) {
//            System.err.println("‚ùó L·ªói khi ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ Groq: " + e.getMessage());
//            return "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë x·ª≠ l√Ω ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.";
//        }
//    }
//
//    }
